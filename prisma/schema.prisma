generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider     = "postgresql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Course {
  id          String  @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  userId      String
  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]
  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  muxData     MuxData?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)

  userProgresses UserProgress[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String?  @unique
  Chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String  @id @default(uuid())
  userId      String
  isCompleted Boolean

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String?
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id         String @id @default(uuid())
  userId     String @unique
  customerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
